generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  name             String?
  password         String?
  isPro            Boolean       @default(false)
  trialEndsAt      DateTime?
  stripeCustomerId String?       @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  habits           Habit[]
  subscription     Subscription?
}

model Habit {
  id             String    @id @default(cuid())
  userId         String
  name           String
  description    String?
  unit           String?
  color          String    @default("#10b981")
  embedToken     String    @unique
  allowDirectLog Boolean   @default(false)
  goalValue      Float?
  goalType       String?   @default("daily")
  type           String    @default("number")
  isPrivate      Boolean   @default(false)
  weekStartDay   String    @default("Monday")
  activeDays     String    @default("[\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"]")
  enabledStats   String    @default("[\"streak\",\"longestStreak\",\"average\",\"total\",\"numberOfDays\"]")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  entries        Entry[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  journals       Journal[]

  @@index([userId])
  @@index([embedToken])
}

model Entry {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  value     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId])
  @@index([date])
}

model Journal {
  id        String   @id @default(cuid())
  habitId   String
  date      DateTime
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  habit     Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@index([habitId])
  @@index([date])
}

model Subscription {
  id                   String    @id @default(cuid())
  userId               String    @unique
  stripeCustomerId     String    @unique
  stripeSubscriptionId String?   @unique
  stripePriceId        String?
  status               String
  plan                 String?
  currentPeriodEnd     DateTime?
  canceledAt           DateTime?
  lastPaymentDate      DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([stripeCustomerId])
}
